
- name: Stampare le informazioni delle credenziali K8s
  hosts: localhost
  gather_facts: false

  tasks:
    - name: Recupera le credenziali per l'API URL K8S
      awx.awx_credential:
        name: "CRED_TEST1"
        credential_type: "Source Control"
        inputs:
          fields:
            - id
            - name
            - inputs
      delegate_to: localhost
      register: api_credential

    - name: Recupera le credenziali per K8s Credential
      awx.awx_credential:
        name: "FF_K8s_Credential"
        credential_type: "K8s Credential"
        inputs:
          fields:
            - id
            - name
            - inputs
      delegate_to: localhost
      register: k8s_credential

    - name: Stampa API URL K8S
      debug:
        msg: "API URL K8S: {{ api_credential.inputs.fields.API_URL_K8S | default('Not provided') }}"

    - name: Stampa Verify SSL Option
      debug:
        msg: "Verify SSL Option: {{ api_credential.inputs.fields.verify_ssl }}"

    - name: Stampa User
      debug:
        msg: "User: {{ k8s_credential.inputs.fields.username | default('Not provided') }}"

    - name: Stampa Password
      debug:
        msg: "Password: {{ k8s_credential.inputs.fields.password | default('Not provided') }}"

    - name: Stampa Namespace
      debug:
        msg: "Namespace: {{ k8s_credential.inputs.fields.namespace | default('Not provided') }}"


---
- name: Creare tipo di credenziale K8s
  awx.awx.credential_type:
    name: "K8s Credential"
    kind: "cloud"
    inputs:
      fields:
        - id: "api_url_k8s"
          label: "API URL K8S"
          type: "string"
        - id: "verify_ssl"
          label: "Verify SSL Option"
          type: "boolean"
    injectors:
      env:
        CUSTOM_API_URL_K8S: "{{ api_url_k8s }}"
        CUSTOM_VERIFY_SSL: "{{ verify_ssl }}"

-------set parametri per credential_type
fields:
  - id: username
    type: string
    label: Username
  - id: password
    type: string
    label: Password
    secret: true
  - id: namespace
    type: string
    label: Namespace
required:
  - username
  - password
  - namespace

 env:
        CUSTOM_K8S_USER: "{{ user }}"
        CUSTOM_K8S_PASSWORD: "{{ password }}"
             CUSTOM_K8S_NAMESPACE: "{{ namespace }}"

  https://test-awx-aap-test.apps.okd.pecsvil.local/api/v2/tokens/




---esempio creazione  credential_type con vars
   # - name: Creare tipo di credenziale K8s Credential
    #   awx.awx.credential_type:
    #     name: "FC_K8S_TEST_play"
    #     kind: "cloud"
    #     inputs:
    #       fields:
    #         - id: "user"
    #           label: "User"
    #           type: "string"
    #         - id: "password"
    #           label: "Password"
    #           secret: true
    #           type: "string"
    #         - id: "k8s_namespace"
    #           label: "Namespace"
    #           type: "string"
    #         - id: "CUSTOM_API_URL_K8S"
    #           label: "API URL K8S"
    #           type: "string"
    #         - id: "CUSTOM_VERIFY_SSL"
    #           label: "Verify SSL"
    #           type: "boolean"
    #     validate_certs: false
    #     injectors:
    #       env:
    #         CUSTOM_K8S_USER: "{{ user }}"
    #         CUSTOM_K8S_PASSWORD: "{{ password }}"
    #         CUSTOM_K8S_NAMESPACE: "{{ k8s_namespace }}"
    #         CUSTOM_API_URL_K8S: "{{ api_url_k8s }}"
    #         CUSTOM_VERIFY_SSL: "{{ verify_ssl }}"
    #   register: k8s_credential_type
------


    # - name: Recupera le credenziali tramite ID 16
    #   uri:
    #     url: "https://test-awx-aap-test.apps.okd.pecsvil.local/api/v2/credentials/16/"
    #     method: GET
    #     user: francesco.cerenzia
    #     password: password
    #     force_basic_auth: yes
    #     status_code: 200
    #     return_content: yes
    #     validate_certs: false
    #   register: response

    # # - name: Stampa api_credential
    # #   debug:
    # #     var: api_credential

    # # - name: Stampa response
    # #   debug:
    # #     var: response

    # - name: Estrarre i valori FC_TEST_K8S_CRED
    #   set_fact:
    #     custom_api_url_k8s: "{{ response.json.inputs.CUSTOM_API_URL_K8S }}"
    #     custom_verify_ssl: "{{ response.json.inputs.CUSTOM_VERIFY_SSL }}"
    #     user: "{{ response.json.inputs.user }}"
    #     password: "{{ response.json.inputs.VALUE_SPECIFIED_IN_NO_LOG_PARAMETER }}"
    #     namespace: "{{ response.json.inputs.namespace }}"

    # - name: Stampa i valori CUSTOM_API_URL_K8S  CUSTOM_VERIFY_SSL
    #   debug:
    #     msg: "CUSTOM_API_URL_K8S: {{ custom_api_url_k8s }}, CUSTOM_VERIFY_SSL: {{ custom_verify_ssl }}"

    # - name: Ottieni il token
    #   awx.awx.token:
    #     controller_host: "https://test-awx-aap-test.apps.okd.pecsvil.local/"
    #     controller_username: "francesco.cerenzia"
    #     controller_password: "password"
    #     validate_certs: false
    #   register: token_output

    # - name: Estrarre il token
    #   set_fact:
    #     awx_token: "{{ token_output.ansible_facts.controller_token.token | default('') }}"

    # - name: Stampa il token se presente
    #   debug:
    #     var: awx_token
    #   when: awx_token != ''

    # # - name: Stampa il token se presente
    # #   debug:
    # #     var: token_output

    # - name: Recupera le informazioni della credenziale tramite ID val17
    #   uri:
    #     url: "https://test-awx-aap-test.apps.okd.pecsvil.local/api/v2/credentials/17/"
    #     method: GET
    #     user: francesco.cerenzia
    #     password: password
    #     force_basic_auth: yes
    #     status_code: 200
    #     return_content: yes
    #     validate_certs: false
    #   register: k8s_credential_info_custom

    # - name: Recupera le informazioni della credenziale tramite ID val30
    #   uri:
    #     url: "https://test-awx-aap-test.apps.okd.pecsvil.local/api/v2/credential_types/30/"
    #     method: GET
    #     user: francesco.cerenzia
    #     password: password
    #     force_basic_auth: yes
    #     status_code: 200
    #     return_content: yes
    #     validate_certs: false
    #   register: k8s_credential_info

    # - name: Attesa conferma
    #   pause:
    #     prompt: "Conferma view parametri Credential==> "
    #     minutes: 2

    # - name: Stampa le informazioni della credenziale FC_TEST_K8S_CRED
    #   debug:
    #     msg:
    #       - "API URL K8S: {{ custom_api_url_k8s }}"
    #       - "Verify SSL Option: {{ custom_verify_ssl }}"
    #       - "User: {{ user }}"
    #       - "Password: {{ password }}"
    #       - "Namespace: {{ namespace }}"

    # - name: Stampa le informazioni della FC_TESTK8S_2
    #   debug:
    #     var: k8s_credential_info_custom.json.inputs

    # - name: Stampa le informazioni della CRED type creata
    #   debug:
    #     var: k8s_credential_info.json.inputs